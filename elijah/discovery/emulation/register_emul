#!/usr/bin/env python 
#
# Cloudlet Infrastructure for Mobile Computing
#
#   Author: Kiryong Ha <krha@cmu.edu>
#
#   Copyright (C) 2011-2013 Carnegie Mellon University
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

import sys
sys.path.insert(0, "../../../")
import time
import threading
from optparse import OptionParser

from urlparse import urlparse
from elijah.discovery.ds_register import http_get
from elijah.discovery.ds_register import http_post
from elijah.discovery.ds_register import http_put
from elijah.discovery.ds_register import get_local_ipaddress
from elijah.discovery.ds_register import RegisterError
from elijah.discovery.monitor import resource
from elijah.discovery.monitor.resource import ResourceMonitorError
from elijah.discovery import log as logging
from elijah.discovery.config import DiscoveryConst as DiscoveryConst
from elijah.discovery.config import DiscoveryConst as RestConst

from flask import Flask
from flask.ext import restful
from elijah.discovery.discovery_rest import ResourceInfo
from elijah.discovery.discovery_rest import CacheInfo


LOG = logging.getLogger(__name__)
UPDATE_PERIOD = 30  # update information for every 30 seconds


def process_command_line(argv):
    USAGE = "$ %prog [registration_server_name] [gps_file]\n"
    USAGE += "  Example) $ %prog http://register.findcloudlet.org\n"
    DESCRIPTION = "Register Cloudlet to a central server for discovery purpose"
    parser = OptionParser(usage=USAGE,
            version='0.1',
            description=DESCRIPTION)

    parser.add_option(
            '-i', '--rest_ip', action='store', type='string', dest='rest_ip', \
            default=None, help="Manually set cloudlet rest server's IP address")
    parser.add_option(
            '-p', '--rest_port', action='store', type='int', \
            dest='rest_port', default=DiscoveryConst.REST_API_PORT, \
            help="Manually set rest port number")
    parser.add_option( '-a', '--latitude', action='store', type='string', dest='latitude', \
            default=None, help="Manually set cloudlet's latitude")

    settings, args = parser.parse_args(argv)
    if len(args) != 2:
        parser.error("Need URL for registration server & datacenter GPS file")

    register_server = str(args[0]).lower()
    gps_file = str(args[1]).lower()
    return register_server, gps_file, settings


class EmulRegisterThread(threading.Thread):
    def __init__(self, register_server, resource_monitor,
            gps_filename, cloudlet_ip=None, cloudlet_rest_port=None):
        gps_file = open(gps_filename, "r").read().split("\n")[0:-1]
        self.cloudlet_ip = cloudlet_ip
        self.cloudlet_rest_port = cloudlet_rest_port
        self.register_server = register_server
        if self.register_server.endswith("/"):
            self.register_server = self.register_server[:-1]
        self.resource_monitor = resource_monitor
        self.url_dict = dict()
        self.gps_list = dict()
        for item in gps_file:
            items = item.split("\t")
            name = items[0].strip()
            coodinates = items[-1].strip()[1:-1].split(",")
            lat = coodinates[0].strip()
            lon = coodinates[-1].strip()
            self.gps_list[name] = (float(lat), float(lon))
        self.stop = threading.Event()
        threading.Thread.__init__(self, target=self.start_register)

    def start_register(self):
        resource_meta = {}
        resource_meta.update(self.resource_monitor.get_static_resource())
        for name, (lat, lon) in self.gps_list.iteritems():
            if self.stop.wait(0.001):
                break
            self._register(self.register_server, resource_meta, name, lat, lon)

    def _register(self, register_server, resource_meta, name, lat, lon):
        # check existing
        end_point = urlparse("%s%s?ip_address=%s&latitude=%f&longitude=%f" % \
                (register_server, RestConst.REGISTER_URL, self.cloudlet_ip, lat, lon))
        response_list = http_get(end_point)

        ret_uri = None
        json_string = {
                "status":"RUN",
                RestConst.KEY_REST_URL: RestConst.REST_API_URL,
                RestConst.KEY_CLOUDLET_IP: self.cloudlet_ip,
                RestConst.KEY_REST_PORT: self.cloudlet_rest_port,
                RestConst.KEY_LATITUDE: str(lat),
                RestConst.KEY_LONGITUDE: str(lon),
                'meta': resource_meta,
                }

        if response_list is None or len(response_list) == 0:
            # POST
            end_point = urlparse("%s%s" % \
                (register_server, RestConst.REGISTER_URL))
            ret_msg = http_post(end_point, json_string=json_string)
            ret_uri = ret_msg.get('resource_uri', None)
            LOG.info("POST information: %s" % json_string)
        else:
            # PUT
            ret_uri = response_list[0].get('resource_uri', None)
            end_point = urlparse("%s%s" % (register_server, ret_uri))
            http_put(end_point, json_string=json_string)
            LOG.info("PUT information: %s" % json_string)
        self.url_dict[name] = ret_uri

    def terminate(self):
        self.stop.set()
        for name, resource_uri in self.url_dict.iteritems():
            end_point = urlparse("%s%s" % (self.register_server, resource_uri))
            json_string = {"status":"TER"}
            ret = http_put(end_point, json_string=json_string)
            print ret


def main(argv):
    register_server, infile, settings = process_command_line(sys.argv[1:])
    resource_monitor = None
    register_client = None
    ret_code = 0

    try:
        # cloudlet machine monitor
        LOG.info("Start resource monitoring")

        resource_stats = resource.ResourceMonitor()
        #resource_monitor = resource.get_instance()
        #resource_monitor.start()

        # Start registration client
        register_client = EmulRegisterThread(register_server, resource_stats,
                cloudlet_ip=get_local_ipaddress(),
                cloudlet_rest_port=settings.rest_port,
                gps_filename=infile)
        register_client.start()

        # discover rest API
        #app = Flask(__name__)
        #api = restful.Api(app)
        #api.add_resource(ResourceInfo, '/api/v1/resource/')
        #api.add_resource(CacheInfo, '/api/v1/resource/<string:app_id>')
        ## do no turn on debug mode. it make a mess for graceful terminate
        #LOG.info("Start RESTful API Server at %d" % (settings.rest_port))
        #app.run(host="0.0.0.0", port=DiscoveryConst.REST_API_PORT)

        while True:
            time.sleep(100)

    except ResourceMonitorError as e:
        LOG.info(str(e))
        LOG.error("Cannot register Cloudlet to central server\n")
        ret_code = 1
    except RegisterError as e:
        LOG.warning(str(e))
        LOG.warning("Cannot register Cloudlet to %s" % (register_server))
        ret_code = 1
    except KeyboardInterrupt as e:
        LOG.warning("User exists")
        ret_code = 1
    finally:
        if resource_monitor is not None:
            resource_monitor.terminate()
        if register_client is not None:
            register_client.terminate()
    return ret_code



if __name__ == "__main__":
    status = main(sys.argv)
    sys.exit(status)
